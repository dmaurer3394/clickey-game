{"version":3,"sources":["components/Jumbotron/jumbotron.js","components/FriendCard/card.js","components/Wrapper/wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","className","score","highscore","FriendCard","onClick","clickCount","id","src","image","alt","name","Wrapper","children","App","state","cards","gameOver","setState","forEach","card","count","alert","shuffleArray","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","console","log","find","cb","i","this","map","friend","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+iCAqBeA,MAnBf,SAAmBC,GACjB,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,eACA,wBAAIA,UAAU,qBAAd,8BACA,6BACA,0BAAMA,UAAU,qBAAhB,0CACyC,iDADzC,kDAIA,6BACA,qCAAWD,EAAME,OACjB,yCAAeF,EAAMG,cCJdC,G,MARI,SAAAJ,GAAK,OACtB,yBAAKC,UAAU,OAAOI,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MAC1D,yBAAKN,UAAU,iBACb,yBAAKO,IAAKR,EAAMS,MAAOC,IAAKV,EAAMW,W,OCDzBC,G,MAFC,SAAAZ,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMa,YC+E1CC,E,2MAxEbC,MAAQ,CACNC,QACAd,MAAO,EACPC,UAAW,G,EAGbc,SAAW,WACL,EAAKF,MAAMb,MAAQ,EAAKa,MAAMZ,WAChC,EAAKe,SAAS,CAAEf,UAAW,EAAKY,MAAMb,QAGxC,EAAKa,MAAMC,MAAMG,SAAQ,SAAAC,GACvBA,EAAKC,MAAQ,KAGfC,MAAM,sBAAwB,EAAKP,MAAMb,OACzC,EAAKgB,SAAS,CAAEhB,MAAO,K,EAGzBqB,aAAe,SAAAC,GAKb,IAJA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAIlB,IAAMD,GACXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCF,EAAiBD,EAFjBG,GAAgB,GAGhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,G,EAGTlB,WAAa,SAAAC,GACXyB,QAAQC,IAAI,EAAKlB,MAAMC,OACvB,EAAKD,MAAMC,MAAMkB,MAAK,SAACC,EAAIC,GACzB,GAAID,EAAG5B,KAAOA,EAAI,CAChB,GAAuB,IAAnBS,EAAMoB,GAAGf,MAIX,OAHAL,EAAMoB,GAAGf,MAAQL,EAAMoB,GAAGf,MAAQ,EAClC,EAAKH,SAAS,CAAEhB,MAAO,EAAKa,MAAMb,MAAQ,IAC1C,EAAKqB,aAAa,EAAKR,MAAMC,QACtB,EAEP,EAAKC,gB,wEAMH,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAWf,MAAOmC,KAAKtB,MAAMb,MAAOC,UAAWkC,KAAKtB,MAAMZ,YAC1D,kBAAC,EAAD,KACGkC,KAAKtB,MAAMC,MAAMsB,KAAI,SAAAC,GAAM,OAC1B,kBAAC,EAAD,CACEjC,WAAY,EAAKA,WACjBC,GAAIgC,EAAOhC,GACXiC,IAAKD,EAAOhC,GACZI,KAAM4B,EAAO5B,KACbF,MAAO8B,EAAO9B,iB,GAhEVgC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.004bf50d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Jumbotron(props) {\r\n  return (\r\n    <div className=\"flex-container\">\r\n      <div className=\"jumbotron\">\r\n        <h1 className=\"display-3\">Clicky Game</h1>\r\n        <h3 className=\"font-weight-light\">Click on a picture to play</h3>\r\n        <hr />\r\n        <span className=\"font-weight-light\">\r\n          You get 1 point for each correct guess <strong>but you lose </strong>\r\n          if you click the same picture twice in a round\r\n        </span>\r\n        <hr />\r\n        <p>Score: {props.score}</p>\r\n        <p>Highscore: {props.highscore}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst FriendCard = props => (\r\n  <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img src={props.image} alt={props.name} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default FriendCard;\r\n","import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./components/Jumbotron/jumbotron\";\nimport Jumbotron from \"./components/Jumbotron/jumbotron\";\nimport FriendCard from \"./components/FriendCard/card\";\nimport cards from \"./friends.json\";\nimport Wrapper from \"./components/Wrapper\";\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n  };\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score });\n    }\n\n    this.state.cards.forEach(card => {\n      card.count = 0;\n    });\n\n    alert(\"Game Over \\nScore: \" + this.state.score);\n    this.setState({ score: 0 });\n  };\n\n  shuffleArray = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  clickCount = id => {\n    console.log(this.state.cards);\n    this.state.cards.find((cb, i) => {\n      if (cb.id === id) {\n        if (cards[i].count === 0) {\n          cards[i].count = cards[i].count + 1;\n          this.setState({ score: this.state.score + 1 });\n          this.shuffleArray(this.state.cards);\n          return true;\n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Jumbotron score={this.state.score} highscore={this.state.highscore} />\n        <Wrapper>\n          {this.state.cards.map(friend => (\n            <FriendCard\n              clickCount={this.clickCount}\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}